version: 2.1

orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1.1
  terraform: circleci/terraform@3.2.0
  discord: antonioned/discord@0.1.0

# Anchors allow for reusing YAML configuration.
anchors:
  # Defines the CircleCI contexts that contain secrets.
  - &context
    context:
      # aws-credentials is no longer needed when using OIDC
      - circleci-secrets     # For TF_STATE_BUCKET, AWS_OIDC_ROLE_ARN
      - slack-notifications  # For Discord webhook

  # Defines a filter to run jobs only on the 'master' branch.
  - &master_branch_filter
    filters:
      branches:
        only:
          - kyle

  # Attaches the workspace to persist files between jobs.
  - &attach_workspace
    attach_workspace:
      at: ~/project

# Reusable commands for setup.
commands:
  install_task:
    steps:
      - run:
          name: "Install Task"
          # This command requires curl and sudo, which are available in cimg/base.
          command: |
            sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

# Jobs define the individual steps of the CI/CD process.
jobs:
  # ===============================================
  # Terraform Infrastructure Jobs
  # ===============================================
  terraform_validate:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - terraform/install
      - install_task
      - run:
          name: "Validate changed services"
          command: task validate-changed
      # - discord/status:
      #     fail_only: true
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform validation failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

  terraform_plan:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - terraform/install
      - install_task
      - run:
          name: "Create Terraform plan for changed services"
          command: task plan-changed env=staging
      - persist_to_workspace:
          root: .
          paths:
            - .tfplans
      # - discord/status:
      #     fail_only: true
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform plan failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

  terraform_apply:
    docker:
      - image: cimg/base:stable
    steps:
      - *attach_workspace
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - terraform/install
      - install_task
      - run:
          name: "Apply Terraform plan for changed services"
          command: task apply-changed env=staging
      # - discord/status:
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform apply failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."
      #     success_message: "âœ… Terraform apply succeeded for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

# Workflows orchestrate the execution of jobs.
workflows:
  # Manages Terraform infrastructure.
  terraform-ci-cd:
    # unless: << pipeline.parameters.run_gatsby_deployment >>
    jobs:
      - terraform_validate:
          <<: *context
          <<: *master_branch_filter
      - terraform_plan:
          <<: *context
          <<: *master_branch_filter
          requires:
            - terraform_validate
      - hold-for-apply:
          type: approval
          requires:
            - terraform_plan
      - terraform_apply:
          <<: *context
          <<: *master_branch_filter
          requires:
            - hold-for-apply
# workflows:
#   terraform-ci-cd:
#     jobs:
#       - terraform_validate:
#           <<: *context
#       - terraform_plan:
#           <<: *context
#           requires:
#             - terraform_validate
#       - hold-for-apply:
#           type: approval
#           requires:
#             - terraform_plan
#       - terraform_apply:
#           <<: *context
#           requires:
#             - hold-for-apply
