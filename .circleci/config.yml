version: 2.1

# Pipeline Parameters allow for triggering specific workflows via the API.
parameters:
  run_gatsby_deployment:
    type: boolean
    default: false

# Orbs provide pre-packaged CircleCI configuration for common tools.
orbs:
  node: circleci/node@5.0.2
  aws-cli: circleci/aws-cli@3.1.1
  terraform: circleci/terraform@3.2.0
  discord: antonioned/discord@0.1.0

# Anchors allow for reusing YAML configuration.
anchors:
  # Defines the CircleCI contexts that contain secrets.
  - &context
    context:
      # aws-credentials is no longer needed when using OIDC
      - circleci-secrets     # For TF_STATE_BUCKET, AWS_OIDC_ROLE_ARN
      - slack-notifications  # For Discord webhook

  # Defines a filter to run jobs only on the 'master' branch.
  - &master_branch_filter
    filters:
      branches:
        only:
          - kyle

  # Attaches the workspace to persist files between jobs.
  - &attach_workspace
    attach_workspace:
      at: ~/project

# Reusable commands for setup.
commands:
  install_task:
    steps:
      - run:
          name: "Install Task"
          # The terraform executor is a minimal Alpine Linux image.
          # We must first install curl, then run the script without sudo.
          command: |
            apk add --no-cache curl
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

# Jobs define the individual steps of the CI/CD process.
jobs:
  # ===============================================
  # Terraform Infrastructure Jobs
  # ===============================================
  terraform_validate:
    executor: terraform/default
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - install_task
      - run:
          name: "Validate changed services"
          command: task validate-changed
      # - discord/status:
      #     fail_only: true
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform validation failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

  terraform_plan:
    executor: terraform/default
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - install_task
      - run:
          name: "Create Terraform plan for changed services"
          command: task plan-changed env=staging
      - persist_to_workspace:
          root: .
          paths:
            - .tfplans
      # - discord/status:
      #     fail_only: true
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform plan failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

  terraform_apply:
    executor: terraform/default
    steps:
      - *attach_workspace
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - install_task
      - run:
          name: "Apply Terraform plan for changed services"
          command: task apply-changed env=staging
      # - discord/status:
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Terraform apply failed for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."
      #     success_message: "âœ… Terraform apply succeeded for commit `${CIRCLE_SHA1:0:7}` by `${CIRCLE_USERNAME}`."

  # ===============================================
  # Gatsby Application Deployment Job
  # ===============================================
  build_and_deploy_gatsby:
    docker:
      - image: cimg/node:16.17-browsers
    steps:
      - checkout # Checks out terraform-services repo
      - aws-cli/setup:
          role-arn: ${AWS_OIDC_ROLE_ARN}
      - add_ssh_keys

      # 1. Checkout the Gatsby application code
      - run:
          name: "Checkout Gatsby Application Code"
          command: git clone git@github.com:green-alchemist/portfolio-gatsby.git gatsby-app
      
      # 2. Get the S3 Bucket Name and CloudFront ID from Terraform
      - terraform/install
      - run:
          name: "Fetch Terraform Outputs for Deployment"
          command: |
            cd ci
            terraform init -backend-config="bucket=${TF_STATE_BUCKET}"
            S3_BUCKET=$(terraform output -raw s3_bucket_name -var="tf_state_bucket=${TF_STATE_BUCKET}")
            CF_DIST_ID=$(terraform output -raw cloudfront_distribution_id -var="tf_state_bucket=${TF_STATE_BUCKET}")

            echo "export S3_BUCKET_NAME=${S3_BUCKET}" >> $BASH_ENV
            echo "export CLOUDFRONT_ID=${CF_DIST_ID}" >> $BASH_ENV
            echo "S3 Bucket: \$S3_BUCKET_NAME"
            echo "CloudFront ID: \$CLOUDFRONT_ID"
            
      # 3. Build the Gatsby site
      - run:
          name: "Install Gatsby Dependencies"
          command: |
            cd gatsby-app
            npm install
      - run:
          name: "Build Gatsby Site"
          command: |
            cd gatsby-app
            npm run build
            
      # 4. Deploy the built site to the S3 bucket
      - run:
          name: "Deploy to S3"
          command: aws s3 sync ./gatsby-app/public s3://${S3_BUCKET_NAME} --delete

      # 5. Invalidate the CloudFront cache
      - run:
          name: "Invalidate CloudFront Cache"
          command: aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"
      # - discord/status:
      #     webhook: "${DISCORD_STATUS_WEBHOOK}"
      #     failure_message: "ðŸš¨ Gatsby deployment failed for tag `${CIRCLE_TAG}`."
      #     success_message: "âœ… Gatsby site deployed successfully for tag `${CIRCLE_TAG}`."

# Workflows orchestrate the execution of jobs.
workflows:
  # Manages Terraform infrastructure.
  terraform-ci-cd:
    unless: << pipeline.parameters.run_gatsby_deployment >>
    jobs:
      - terraform_validate:
          <<: *context
          <<: *master_branch_filter
      - terraform_plan:
          <<: *context
          <<: *master_branch_filter
          requires:
            - terraform_validate
      - hold-for-apply:
          type: approval
          requires:
            - terraform_plan
      - terraform_apply:
          <<: *context
          <<: *master_branch_filter
          requires:
            - hold-for-apply

  # Deploys the Gatsby application via a git tag.
  deploy-portfolio-gatsby-by-tag:
    unless: << pipeline.parameters.run_gatsby_deployment >>
    jobs:
      - build_and_deploy_gatsby:
          <<: *context
          filters:
            tags:
              only: /^deploy-.*/
            branches:
              ignore: /.*/
  
  # Triggers a Gatsby deployment via an API call (e.g., from a Strapi webhook).
  api-triggered-deployment:
    when: << pipeline.parameters.run_gatsby_deployment >>
    jobs:
      - build_and_deploy_gatsby:
          <<: *context

